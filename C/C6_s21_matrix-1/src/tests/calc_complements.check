#test test_one_by_one
  matrix_t expected = {0};
  matrix_t m = {0};
  matrix_t result = {0};
  s21_create_matrix(1, 1, &m);
  s21_create_matrix(1, 1, &expected);
  m.matrix[0][0] = 2;
  expected.matrix[0][0] = 2;
  int code = s21_calc_complements(&m, &result);
  ck_assert_int_eq(code, OK);
  ck_assert_int_eq(s21_eq_matrix(&result, &expected), SUCCESS);
  s21_remove_matrix(&m);
  s21_remove_matrix(&result);
  s21_remove_matrix(&expected);

#test test_incorrect
  matrix_t m = {0};
  matrix_t result = {0};
  int code = s21_calc_complements(&m, &result);
  ck_assert_int_eq(code, INCORRECT_MATRIX);

#test test_not_sqare
  matrix_t m = {0};
  matrix_t result = {0};
  s21_create_matrix(3, 4, &m);
  int code = s21_calc_complements(&m, &result);
  ck_assert_int_eq(code, ERROR);
  s21_remove_matrix(&m);
  

#test calc_test_normal
  matrix_t expected = {0};
  matrix_t m = {0};
  matrix_t result = {0};
  s21_create_matrix(3, 3, &m);
  s21_create_matrix(3, 3, &expected);
  m.matrix[0][0] = 1;
  m.matrix[0][1] = 2;
  m.matrix[0][2] = 3;

  m.matrix[1][0] = 0;
  m.matrix[1][1] = 4;
  m.matrix[1][2] = 2;

  m.matrix[2][0] = 5;
  m.matrix[2][1] = 2;
  m.matrix[2][2] = 1;

  expected.matrix[0][0] = 0;
  expected.matrix[0][1] = 10;
  expected.matrix[0][2] = -20;

  expected.matrix[1][0] = 4;
  expected.matrix[1][1] = -14;
  expected.matrix[1][2] = 8;

  expected.matrix[2][0] = -8;
  expected.matrix[2][1] = -2;
  expected.matrix[2][2] = 4;

  int code = s21_calc_complements(&m, &result);
  ck_assert_int_eq(s21_eq_matrix(&result, &expected), SUCCESS);
  ck_assert_int_eq(code, OK);
  s21_remove_matrix(&m);
  s21_remove_matrix(&result);
  s21_remove_matrix(&expected);
