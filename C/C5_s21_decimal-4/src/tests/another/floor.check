#test floor1
   s21_decimal decimal;
   s21_decimal decimal_check;
   decimal.bits[0] = 0b00000000000000000000000000000000;
   decimal.bits[1] = 0b00000000000000000000000000000000;
   decimal.bits[2] = 0b00000000000000000000000000000000;
   decimal.bits[3] = 0b10000000000000000000000000000000;
   decimal_check.bits[0] = 0b00000000000000000000000000000000;
   decimal_check.bits[1] = 0b00000000000000000000000000000000;
   decimal_check.bits[2] = 0b00000000000000000000000000000000;
   decimal_check.bits[3] = 0b10000000000000000000000000000000;
   s21_decimal result = {{0, 0, 0, 0}};
   ck_assert_int_eq(0, s21_floor(decimal, &result));
   for (int i = 0; i < 4; i++)
     ck_assert_int_eq(decimal_check.bits[i], result.bits[i]);
 

#test floor2
   s21_decimal decimal;
   s21_decimal decimal_check;
   decimal.bits[0] = 0b00000000000000000000000000000000;
   decimal.bits[1] = 0b00000000000000000000000000000000;
   decimal.bits[2] = 0b00000000000000000000000000000000;
   decimal.bits[3] = 0b10000000000001110000000000000000;
   decimal_check.bits[0] = 0b00000000000000000000000000000000;
   decimal_check.bits[1] = 0b00000000000000000000000000000000;
   decimal_check.bits[2] = 0b00000000000000000000000000000000;
   decimal_check.bits[3] = 0b10000000000000000000000000000000;
   s21_decimal result = {{0, 0, 0, 0}};
   ck_assert_int_eq(0, s21_floor(decimal, &result));
   for (int i = 0; i < 4; i++)
     ck_assert_int_eq(decimal_check.bits[i], result.bits[i]);
 

#test floor3
   s21_decimal decimal;
   s21_decimal decimal_check;
   decimal.bits[0] = 0b00000000001110000000010000000100;
   decimal.bits[1] = 0b00000000000000000000000000000000;
   decimal.bits[2] = 0b00000000000000000000000000000000;
   decimal.bits[3] = 0b10000000000001110000000000000000;
   decimal_check.bits[0] = 0b00000000000000000000000000000001;
   decimal_check.bits[1] = 0b00000000000000000000000000000000;
   decimal_check.bits[2] = 0b00000000000000000000000000000000;
   decimal_check.bits[3] = 0b10000000000000000000000000000000;
   s21_decimal result = {{0, 0, 0, 0}};
   ck_assert_int_eq(0, s21_floor(decimal, &result));
   for (int i = 0; i < 4; i++)
     ck_assert_int_eq(decimal_check.bits[i], result.bits[i]);
 

#test floor4
   s21_decimal decimal;
   s21_decimal decimal_check;
   decimal.bits[0] = 0b00000000001110000000010000000100;
   decimal.bits[1] = 0b00000000000000000000000000000000;
   decimal.bits[2] = 0b00000000000000000000000000000000;
   decimal.bits[3] = 0b00000000000001110000000000000000;
   decimal_check.bits[0] = 0b00000000000000000000000000000000;
   decimal_check.bits[1] = 0b00000000000000000000000000000000;
   decimal_check.bits[2] = 0b00000000000000000000000000000000;
   decimal_check.bits[3] = 0b00000000000000000000000000000000;
   s21_decimal result = {{0, 0, 0, 0}};
   ck_assert_int_eq(0, s21_floor(decimal, &result));
   for (int i = 0; i < 4; i++)
     ck_assert_int_eq(decimal_check.bits[i], result.bits[i]);
 

#test floor5
   s21_decimal decimal;
   s21_decimal decimal_check;
   decimal.bits[0] = 0b00000000000000000000000000000000;
   decimal.bits[1] = 0b00000000000000000000000000000000;
   decimal.bits[2] = 0b00000000000000000000000000100000;
   decimal.bits[3] = 0b10000000000000010000000000000000;
   decimal_check.bits[0] = 0b00110011001100110011001100110100;
   decimal_check.bits[1] = 0b00110011001100110011001100110011;
   decimal_check.bits[2] = 0b00000000000000000000000000000011;
   decimal_check.bits[3] = 0b10000000000000000000000000000000;
   s21_decimal result = {{0, 0, 0, 0}};
   ck_assert_int_eq(0, s21_floor(decimal, &result));
   for (int i = 0; i < 4; i++)
     ck_assert_int_eq(decimal_check.bits[i], result.bits[i]);
 

#test floor6
   s21_decimal decimal;
   s21_decimal decimal_check;
   decimal.bits[0] = 0b00000000000000000000000000000000;
   decimal.bits[1] = 0b00000000000000000000000000000000;
   decimal.bits[2] = 0b00000000000000000000000000100000;
   decimal.bits[3] = 0b00000000000000010000000000000000;
   decimal_check.bits[0] = 0b00110011001100110011001100110011;
   decimal_check.bits[1] = 0b00110011001100110011001100110011;
   decimal_check.bits[2] = 0b00000000000000000000000000000011;
   decimal_check.bits[3] = 0b00000000000000000000000000000000;
   s21_decimal result = {{0, 0, 0, 0}};
   ck_assert_int_eq(0, s21_floor(decimal, &result));
   for (int i = 0; i < 4; i++)
     ck_assert_int_eq(decimal_check.bits[i], result.bits[i]);
 

#test floor7
   s21_decimal decimal;
   decimal.bits[0] = 0b00000000000000000000000000000000;
   decimal.bits[1] = 0b00000000000000000000000000000000;
   decimal.bits[2] = 0b00000000000000000000000000100000;
   decimal.bits[3] = 0b10000000011111110000000000000000;
   s21_decimal result = {{0, 0, 0, 0}};
   ck_assert_int_eq(1, s21_floor(decimal, &result));
 

#test floor8
   s21_decimal decimal;
   decimal.bits[0] = 0b00000000000000000000000000000000;
   decimal.bits[1] = 0b00000000000000000000000000000000;
   decimal.bits[2] = 0b00000000000000000000000000100000;
   decimal.bits[3] = 0b10000000011111110000000000000000;
   s21_decimal *result = NULL;
   ck_assert_int_eq(1, s21_floor(decimal, result));
 
#test floor9
  s21_decimal src, origin, result;
  int originerr = 0;
  src.bits[0] = 0b00000000000000000000000000110010;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b00000000000000010000000000000000;
  int err = s21_floor(src, &result);
  origin.bits[0] = 0b00000000000000000000000000000101;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test floor10
  s21_decimal src, origin, result;
  int originerr = 0;
  // src = 3.4;
  src.bits[0] = 0b00000000000000000000000000100010;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b00000000000000010000000000000000;
  int err = s21_floor(src, &result);
  // origin = 3;
  origin.bits[0] = 0b00000000000000000000000000000011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test floor11
  s21_decimal src, origin, result;
  int originerr = 0;

  src.bits[0] = 0b00000000000000000000000000000000;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b00000000000000100000000000000000;
  int err = s21_floor(src, &result);

  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test floor12
  s21_decimal src, origin, result;
  int originerr = 0;
  // src = -2.4363463;
  src.bits[0] = 0b00000001011100111100000111000111;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b10000000000001110000000000000000;
  int err = s21_floor(src, &result);
  // origin = -3;
  origin.bits[0] = 0b00000000000000000000000000000011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);

#test floor13
  s21_decimal src, origin, result;
  int originerr = 0;
  // src = -0.45;
  src.bits[0] = 0b00000000000000000000000000101101;
  src.bits[1] = 0b00000000000000000000000000000000;
  src.bits[2] = 0b00000000000000000000000000000000;
  src.bits[3] = 0b10000000000000100000000000000000;
  int err = s21_floor(src, &result);
  // origin = -1;
  origin.bits[0] = 0b00000000000000000000000000000001;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  ck_assert_int_eq(origin.bits[3], result.bits[3]);
  ck_assert_int_eq(origin.bits[2], result.bits[2]);
  ck_assert_int_eq(origin.bits[1], result.bits[1]);
  ck_assert_int_eq(origin.bits[0], result.bits[0]);
  ck_assert_int_eq(originerr, err);
