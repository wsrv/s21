#test truncate1
  s21_decimal decimal;
  s21_decimal decimal_check;
  decimal.bits[0] = 0b00000000000000000000000000000000;
  decimal.bits[1] = 0b00000000000000000000000000000000;
  decimal.bits[2] = 0b00000000000000000000000000000000;
  decimal.bits[3] = 0b10000000000000000000000000000000;
  decimal_check.bits[0] = 0b00000000000000000000000000000000;
  decimal_check.bits[1] = 0b00000000000000000000000000000000;
  decimal_check.bits[2] = 0b00000000000000000000000000000000;
  decimal_check.bits[3] = 0b10000000000000000000000000000000;
  s21_decimal result = {{0, 0, 0, 0}};
  ck_assert_int_eq(0, s21_truncate(decimal, &result));
  for (int i = 0; i < 4; i++)
    ck_assert_int_eq(decimal_check.bits[i], result.bits[i]);

#test truncate2
  s21_decimal decimal;
  s21_decimal decimal_check;
  decimal.bits[0] = 0b00000000000000000000000000000000;
  decimal.bits[1] = 0b00000000000000000000000000000000;
  decimal.bits[2] = 0b00000000000000000000000000000000;
  decimal.bits[3] = 0b10000000000001110000000000000000;
  decimal_check.bits[0] = 0b00000000000000000000000000000000;
  decimal_check.bits[1] = 0b00000000000000000000000000000000;
  decimal_check.bits[2] = 0b00000000000000000000000000000000;
  decimal_check.bits[3] = 0b10000000000000000000000000000000;
  s21_decimal result = {{0, 0, 0, 0}};
  ck_assert_int_eq(0, s21_truncate(decimal, &result));
  for (int i = 0; i < 4; i++)
    ck_assert_int_eq(decimal_check.bits[i], result.bits[i]);


#test truncate3
  s21_decimal decimal;
  s21_decimal decimal_check;
  decimal.bits[0] = 0b00000000001110000000010000000100;
  decimal.bits[1] = 0b00000000000000000000000000000000;
  decimal.bits[2] = 0b00000000000000000000000000000000;
  decimal.bits[3] = 0b10000000000001110000000000000000;
  decimal_check.bits[0] = 0b00000000000000000000000000000000;
  decimal_check.bits[1] = 0b00000000000000000000000000000000;
  decimal_check.bits[2] = 0b00000000000000000000000000000000;
  decimal_check.bits[3] = 0b10000000000000000000000000000000;
  s21_decimal result = {{0, 0, 0, 0}};
  ck_assert_int_eq(0, s21_truncate(decimal, &result));
  for (int i = 0; i < 4; i++)
    ck_assert_int_eq(decimal_check.bits[i], result.bits[i]);


#test truncate4
  s21_decimal decimal;
  s21_decimal decimal_check;
  decimal.bits[0] = 0b00000000000000000000000000000000;
  decimal.bits[1] = 0b00000000000000000000000000000000;
  decimal.bits[2] = 0b00000000000000000000000000100000;
  decimal.bits[3] = 0b10000000000000010000000000000000;
  decimal_check.bits[0] = 0b00110011001100110011001100110011;
  decimal_check.bits[1] = 0b00110011001100110011001100110011;
  decimal_check.bits[2] = 0b00000000000000000000000000000011;
  decimal_check.bits[3] = 0b10000000000000000000000000000000;
  s21_decimal result = {{0, 0, 0, 0}};
  ck_assert_int_eq(0, s21_truncate(decimal, &result));
  for (int i = 0; i < 4; i++)
    ck_assert_int_eq(decimal_check.bits[i], result.bits[i]);


#test truncate5
  s21_decimal decimal;
  decimal.bits[0] = 0b00000000000000000000000000000000;
  decimal.bits[1] = 0b00000000000000000000000000000000;
  decimal.bits[2] = 0b00000000000000000000000000100000;
  decimal.bits[3] = 0b10000000011111110000000000000000;
  s21_decimal result = {{0, 0, 0, 0}};
  ck_assert_int_eq(1, s21_truncate(decimal, &result));


#test truncate6
  s21_decimal decimal;
  decimal.bits[0] = 0b00000000000000000000000000000000;
  decimal.bits[1] = 0b00000000000000000000000000000000;
  decimal.bits[2] = 0b00000000000000000000000000100000;
  decimal.bits[3] = 0b10000000011111110000000000000000;
  s21_decimal *result = NULL;
  ck_assert_int_eq(1, s21_truncate(decimal, result));

#test truncate7
  s21_decimal decimal;
  s21_decimal decimal_check;
  decimal.bits[0] = 0b00000000000000000000000000000101;
  decimal.bits[1] = 0b00000000000000000000000000000000;
  decimal.bits[2] = 0b00000000000000000000000000000000;
  decimal.bits[3] = 0b10000000000000010000000000000000;
  decimal_check.bits[0] = 0b00000000000000000000000000000000;
  decimal_check.bits[1] = 0b00000000000000000000000000000000;
  decimal_check.bits[2] = 0b00000000000000000000000000000000;
  decimal_check.bits[3] = 0b10000000000000000000000000000000;
  s21_decimal result = {{0, 0, 0, 0}};
  ck_assert_int_eq(0, s21_truncate(decimal, &result));
  for (int i = 0; i < 4; i++)
    ck_assert_int_eq(decimal_check.bits[i], result.bits[i]);

#test truncate8
  s21_decimal decimal, decimal_check;
  decimal.bits[0] = 0b11000100000001000100000010001111;
  decimal.bits[1] = 0b01000000100100100110001100010101;
  decimal.bits[2] = 0b00011011100111100111001001011101;
  decimal.bits[3] = 0b10000000000010100000000000000000;

  decimal_check.bits[0] = 0b00000100101111011011011101001000;
  decimal_check.bits[1] = 0b00001011110111001011101111010111;
  decimal_check.bits[2] = 0b00000000000000000000000000000000;
  decimal_check.bits[3] = 0b10000000000000000000000000000000;

  s21_decimal result = {{0, 0, 0, 0}};
  ck_assert_int_eq(0, s21_truncate(decimal, &result));
  for (int i = 0; i < 4; i++)
    ck_assert_int_eq(decimal_check.bits[i], result.bits[i]);

#test truncate9
  s21_decimal decimal, decimal_check;
  decimal.bits[0] = 0b00000000000000000000000000000001;
  decimal.bits[1] = 0b00000000000000000000000000000000;
  decimal.bits[2] = 0b00000000000000000000000000000000;
  decimal.bits[3] = 0b00000000001101000000000000000000;

  decimal_check.bits[0] = 0b00000000000000000000000000000000;
  decimal_check.bits[1] = 0b00000000000000000000000000000000;
  decimal_check.bits[2] = 0b00000000000000000000000000000000;
  decimal_check.bits[3] = 0b00000000000000000000000000000000;

  s21_decimal result = {{0, 0, 0, 0}};
  ck_assert_int_eq(1, s21_truncate(decimal, &result));
  for (int i = 0; i < 4; i++)
    ck_assert_int_eq(decimal_check.bits[i], result.bits[i]);
