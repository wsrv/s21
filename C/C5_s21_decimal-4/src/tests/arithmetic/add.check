#test add1
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b00000000000000000000000000000010;
  value1.bits[1] = 0b00000000000000000000000000000000;
  value1.bits[2] = 0b00000000000000000000000000000000;
  value1.bits[3] = 0b00000000000000000000000000000000;
  value2.bits[0] = 0b00000000000000000000000000000011;
  value2.bits[1] = 0b00000000000000000000000000000000;
  value2.bits[2] = 0b00000000000000000000000000000000;
  value2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b00000000000000000000000000000101;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(0, err);


#test add2
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b00000000000000000000000000000011;
  value1.bits[1] = 0b00000000000000000000000000000000;
  value1.bits[2] = 0b00000000000000000000000000000000;
  value1.bits[3] = 0b00000000000000000000000000000000;
  value2.bits[0] = 0b00000000000000000000000000000010;
  value2.bits[1] = 0b00000000000000000000000000000000;
  value2.bits[2] = 0b00000000000000000000000000000000;
  value2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b00000000000000000000000000000101;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(0, err);



#test add3
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b00000000000000000000000000000000;
  value1.bits[1] = 0b00000000000000000000000000000000;
  value1.bits[2] = 0b00000000000000000000000000000000;
  value1.bits[3] = 0b00000000000000000000000000000000;
  value2.bits[0] = 0b00000000000000000000000000000011;
  value2.bits[1] = 0b00000000000000000000000000000000;
  value2.bits[2] = 0b00000000000000000000000000000000;
  value2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b00000000000000000000000000000011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(0, err);



#test add4
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b00000000000000000000000000000010;
  value1.bits[1] = 0b00000000000000000000000000000000;
  value1.bits[2] = 0b00000000000000000000000000000000;
  value1.bits[3] = 0b00000000000000000000000000000000;
  value2.bits[0] = 0b00000000000000000000000000000000;
  value2.bits[1] = 0b00000000000000000000000000000000;
  value2.bits[2] = 0b00000000000000000000000000000000;
  value2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b00000000000000000000000000000010;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(0, err);



#test add5
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b00000000000001011001000011001100;
  value1.bits[1] = 0b00000000000000000000000000000000;
  value1.bits[2] = 0b00000000000000000000000000000000;
  value1.bits[3] = 0b10000000000000000000000000000000;

  value2.bits[0] = 0b00000000000000000000000000000001;
  value2.bits[1] = 0b00000000000000000000000000000000;
  value2.bits[2] = 0b00000000000000000000000000000000;
  value2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b00000000000001011001000011001011;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(0, err);



#test add6
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b00000000000000000000000000000001;
  value1.bits[1] = 0b00000000000000000000000000000000;
  value1.bits[2] = 0b00000000000000000000000000000000;
  value1.bits[3] = 0b00000000000000000000000000000000;

  value2.bits[0] = 0b11111101101100110001110000110001;  // 4356373809
  value2.bits[1] = 0b00000000000000000000000000010110;  // 22
  value2.bits[2] = 0b00000000000000000000000000000000;
  value2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b11111101101100110001110000110010;  // 4256373810
  origin.bits[1] = 0b00000000000000000000000000010110;  // 22
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(0, err);



#test add7
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b01001100110100101000000111000101;
  value1.bits[1] = 0b00000000000000000000000000000010;
  value1.bits[2] = 0b00000000000000000000000000000000;
  value1.bits[3] = 0b10000000000000000000000000000000;

  value2.bits[0] = 0b00000000000000000000000000000011;
  value2.bits[1] = 0b00000000000000000000000000000000;
  value2.bits[2] = 0b00000000000000000000000000000000;
  value2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b01001100110100101000000111001000;
  origin.bits[1] = 0b00000000000000000000000000000010;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b10000000000000000000000000000000;
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(0, err);



#test add8
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b10001001111001111111111111111111;
  value1.bits[1] = 0b10001010110001110010001100000100;
  value1.bits[2] = 0b00000000000000000000000000000000;
  value1.bits[3] = 0b00000000000000000000000000000000;

  value2.bits[0] = 0b00000000000000000000000000000001;
  value2.bits[1] = 0b00000000000000000000000000000000;
  value2.bits[2] = 0b00000000000000000000000000000000;
  value2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b10001001111010000000000000000000;
  origin.bits[1] = 0b10001010110001110010001100000100;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(0, err);



#test add9
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b11111111111111111111111111111111;
  value1.bits[1] = 0b11111111111111111111111111111111;
  value1.bits[2] = 0b00000000000000000000000000000000;
  value1.bits[3] = 0b00000000000000000000000000000000;
  value2.bits[0] = 0b00000000000000000000000000000001;
  value2.bits[1] = 0b00000000000000000000000000000000;
  value2.bits[2] = 0b00000000000000000000000000000000;
  value2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000001;
  origin.bits[3] = 0b00000000000000000000000000000000;
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(0, err);



#test add10
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b11111111111111111111111111110110;  // 4294967286
  value1.bits[1] = 0b11111111111111111111111111111111;  // 4294967295
  value1.bits[2] = 0b00000000000000000000000000001001;  // 9
  value1.bits[3] = 0b00000000000000010000000000000000;  // -2
  value2.bits[0] = 0b00111001100010111010010101100010;  // 965453154
  value2.bits[1] = 0b00000000000000000000000000000000;
  value2.bits[2] = 0b00000000000000000000000000000000;
  value2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b00111111011101000111010111001010;  // 1064596938
  origin.bits[1] = 0b00000000000000000000000000000010;  // 2
  origin.bits[2] = 0b00000000000000000000000000001010;  // 10
  origin.bits[3] = 0b00000000000000010000000000000000;  // -2
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(0, err);



#test add11
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b10000010111000100101101011101101;
  value1.bits[1] = 0b11111001111010000010010110101101;
  value1.bits[2] = 0b10110000001111101111000010010100;
  value1.bits[3] = 0b10000000000011100000000000000000;  // 14
  value2.bits[0] = 0b00000011010000001001011100101110;
  value2.bits[1] = 0b00000000000000000000000000000000;
  value2.bits[2] = 0b00000000000000000000000000000000;
  value2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b01110001001010101101101011101101;
  origin.bits[1] = 0b00101110001111001110000111111000;
  origin.bits[2] = 0b10110000001111101110111101101101;
  origin.bits[3] = 0b10000000000011100000000000000000;
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(0, err);



#test add12
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b10000010111000100101101011101101;
  value1.bits[1] = 0b11111001111010000010010110101101;
  value1.bits[2] = 0b10110000001111101111000010010100;
  value1.bits[3] = 0b10000000000011100000000000000000;

  value2.bits[0] = 0b01001000000110110001111110011000;
  value2.bits[1] = 0b11111011111111011000100101101101;
  value2.bits[2] = 0b00000000000001000110110101110111;
  value2.bits[3] = 0b10000000000110000000000000000000;
  int res = s21_add(value1, value2, &result);
  origin.bits[0] = 0b10110110001010011011010111011010;
  origin.bits[1] = 0b11111001111010100000110001111111;
  origin.bits[2] = 0b10110000001111101111000010010100;
  origin.bits[3] = 0b10000000000011100000000000000000;
  for (int i = 0; i < 4; i++)
    ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(0, res);



#test add13
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b01001110111001000011100101110110;
  value1.bits[1] = 0b01001011001101011010000111011001;
  value1.bits[2] = 0b00011001101110010111010010111111;
  value1.bits[3] = 0b00000000000111100000000000000000;
  value2.bits[0] = 0b00000000000000000000000000000000;
  value2.bits[1] = 0b00000000000000000000000000000000;
  value2.bits[2] = 0b00000000000000000000000000000000;
  value2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(2, err);



#test add14
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b10010001000010101111010011001010;
  value1.bits[1] = 0b11000000010001011101010111110010;
  value1.bits[2] = 0b00100111111001000001101100000000;
  value1.bits[3] = 0b00000000001010100000000000000000;  // 42

  value2.bits[0] = 0b00010001110011011101000110000101;
  value2.bits[1] = 0b11110101101111000110111111000000;
  value2.bits[2] = 0b00000010110101010000111100111111;
  value2.bits[3] = 0b00000000001000000000000000000000;  // 32
  int err = s21_add(value1, value2, &result);

  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000; 
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(2, err);



#test add15
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b11111111111111111111111111111111;
  value1.bits[1] = 0b11111111111111111111111111111111;
  value1.bits[2] = 0b11111111111111111111111111111111;
  value1.bits[3] = 0b00000000000000000000000000000000;

  value2.bits[0] = 0b00000000000000000000000000000001;
  value2.bits[1] = 0b00000000000000000000000000000000;
  value2.bits[2] = 0b00000000000000000000000000000000;
  value2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b11111111111111111111111111111110;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b00000000000000000000000000000000;
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(0, err);



#test add16
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b11111111111111111111111111111111;
  value1.bits[1] = 0b11111111111111111111111111111111;
  value1.bits[2] = 0b11111111111111111111111111111111;
  value1.bits[3] = 0b10000000000000000000000000000000;
  value2.bits[0] = 0b00000000000000000000000000000001;
  value2.bits[1] = 0b00000000000000000000000000000000;
  value2.bits[2] = 0b00000000000000000000000000000000;
  value2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b11111111111111111111111111111110;
  origin.bits[1] = 0b11111111111111111111111111111111;
  origin.bits[2] = 0b11111111111111111111111111111111;
  origin.bits[3] = 0b10000000000000000000000000000000;
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(0, err);



#test add17
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b00000000000000000000000000000000;
  value1.bits[1] = 0b00000000000000000000000000000000;
  value1.bits[2] = 0b00000000000000000000000000000000;
  value1.bits[3] = 0b00000000000000000000000000000000;
  value2.bits[0] = 0b01001111101101000110000001100101;
  value2.bits[1] = 0b01000010001101101011011001100001;
  value2.bits[2] = 0b01111010101111011000110010011010;
  value2.bits[3] = 0b10000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b01001111101101000110000001100101;
  origin.bits[1] = 0b01000010001101101011011001100001;
  origin.bits[2] = 0b01111010101111011000110010011010;
  origin.bits[3] = 0b10000000000000000000000000000000;
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(0, err);


#test add18
  s21_decimal value1, value2, origin, result;
  value1.bits[0] = 0b11111111111111111111111111111111;
  value1.bits[1] = 0b11111111111111111111111111111111;
  value1.bits[2] = 0b11111111111111111111111111111111;
  value1.bits[3] = 0b00000000000000000000000000000000;
  value2.bits[0] = 0b11111111111111111111111111111111;
  value2.bits[1] = 0b11111111111111111111111111111111;
  value2.bits[2] = 0b11111111111111111111111111111111;
  value2.bits[3] = 0b00000000000000000000000000000000;
  int err = s21_add(value1, value2, &result);
  origin.bits[0] = 0b00000000000000000000000000000000;
  origin.bits[1] = 0b00000000000000000000000000000000;
  origin.bits[2] = 0b00000000000000000000000000000000;
  origin.bits[3] = 0b00000000000000000000000000000000;
  for (int i = 0; i < 4; i++) ck_assert_int_eq(origin.bits[i], result.bits[i]);
  ck_assert_int_eq(1, err);